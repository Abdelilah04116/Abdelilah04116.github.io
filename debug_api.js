#!/usr/bin/env node
/**
 * Debug de l'API Gemini
 */

async function debugAPI() {
  console.log('üîç Debug de l\'API Gemini');
  console.log('=' * 50);
  
  // Test 1 : V√©rifier la variable d'environnement
  console.log('üìã Test 1 : Variable d\'environnement');
  console.log('GOOGLE_API_KEY:', process.env.GOOGLE_API_KEY ? '‚úÖ Configur√©e' : '‚ùå Non configur√©e');
  
  if (process.env.GOOGLE_API_KEY) {
    console.log('Longueur de la cl√©:', process.env.GOOGLE_API_KEY.length);
    console.log('D√©but de la cl√©:', process.env.GOOGLE_API_KEY.substring(0, 10) + '...');
  }
  
  // Test 2 : Test direct de l'API
  console.log('\nüìã Test 2 : Test direct de l\'API');
  
  if (!process.env.GOOGLE_API_KEY) {
    console.log('‚ùå Pas de cl√© API, test impossible');
    return;
  }
  
  try {
    console.log('üîÑ Test de l\'API Gemini...');
    
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.GOOGLE_API_KEY}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: 'Dis-moi bonjour en fran√ßais'
          }]
        }]
      })
    });
    
    console.log('üìä Status:', response.status);
    console.log('üìä OK:', response.ok);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ API fonctionnelle !');
      console.log('R√©ponse:', data.candidates[0].content.parts[0].text);
    } else {
      const errorText = await response.text();
      console.log('‚ùå Erreur API:', errorText);
    }
    
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
  
  // Test 3 : Test de la fonction compl√®te
  console.log('\nüìã Test 3 : Test de la fonction compl√®te');
  
  const event = {
    httpMethod: 'POST',
    body: JSON.stringify({ message: 'Quel est ton num√©ro de t√©l√©phone ?' })
  };
  
  try {
    const { handler } = require('./netlify/functions/api.js');
    const result = await handler(event, {});
    
    console.log('üìä Status:', result.statusCode);
    console.log('üìä Body:', result.body.substring(0, 200) + '...');
    
    if (result.statusCode === 200) {
      const response = JSON.parse(result.body);
      console.log('üìù R√©ponse compl√®te:', response.response);
    }
    
  } catch (error) {
    console.log('‚ùå Erreur fonction:', error.message);
  }
}

async function testCl√©API() {
  console.log('\nüîë Test de la Cl√© API');
  console.log('=' * 50);
  
  // Test avec une cl√© de test (√† remplacer par votre vraie cl√©)
  const testKey = 'AIzaSyAESAzLncervSl2KLwRhMwy2Yu5151lG5Y';
  
  console.log('üîÑ Test avec la cl√© fournie...');
  
  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${testKey}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [{
            text: 'Dis-moi bonjour'
          }]
        }]
      })
    });
    
    console.log('üìä Status:', response.status);
    
    if (response.ok) {
      const data = await response.json();
      console.log('‚úÖ Cl√© de test fonctionnelle !');
      console.log('R√©ponse:', data.candidates[0].content.parts[0].text);
    } else {
      const errorText = await response.text();
      console.log('‚ùå Erreur avec la cl√© de test:', errorText);
    }
    
  } catch (error) {
    console.log('‚ùå Erreur:', error.message);
  }
}

async function main() {
  await debugAPI();
  await testCl√©API();
  
  console.log('\n' + '=' * 50);
  console.log('üìã Diagnostic :');
  console.log('1. Si la cl√© API n\'est pas configur√©e ‚Üí Configurez-la dans Netlify');
  console.log('2. Si la cl√© API est invalide ‚Üí Cr√©ez une nouvelle cl√© sur Google AI Studio');
  console.log('3. Si l\'API fonctionne mais pas la fonction ‚Üí Probl√®me dans le code');
  console.log('4. Si rien ne fonctionne ‚Üí Probl√®me de r√©seau ou de configuration');
  
  console.log('\nüîß Solutions :');
  console.log('1. Allez sur https://makersuite.google.com/app/apikey');
  console.log('2. Cr√©ez une nouvelle cl√© API');
  console.log('3. Configurez-la dans Netlify (Site settings > Environment variables)');
  console.log('4. Red√©ployez le site');
}

if (require.main === module) {
  main().catch(console.error);
} 