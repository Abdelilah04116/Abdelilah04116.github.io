#!/usr/bin/env python3
"""
Application Flask pour Railway - Portfolio avec Chatbot IA
"""

from flask import Flask, request, jsonify, render_template_string
import os
import json
import requests
from datetime import datetime
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configuration
PORT = int(os.environ.get('PORT', 5000))
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')

# Contexte du portfolio
PORTFOLIO_CONTEXT = """
Tu es l'assistant IA d'Abdelilah Ourti. Voici mes informations compl√®tes :

INFORMATIONS PERSONNELLES :
- Nom complet : Abdelilah Ourti
- T√©l√©phone : +33 6 XX XX XX XX (remplacez par votre vrai num√©ro)
- Email : abdellah.ourti@email.com (remplacez par votre vrai email)
- Localisation : France
- Nationalit√© : Marocaine

FORMATION :
- Master en IA et Deep Learning
- Sp√©cialisation en Computer Vision et Machine Learning
- Formations certifi√©es en d√©veloppement IA

COMP√âTENCES TECHNIQUES :
- Langages : Python, JavaScript, Java, C++
- IA/ML : TensorFlow, PyTorch, Scikit-learn, OpenCV
- Cloud : AWS, Docker, Kubernetes, CI/CD
- Web : React, Node.js, Flask, Django
- Bases de donn√©es : MySQL, MongoDB, PostgreSQL

PROJETS R√âALIS√âS :
1. Syst√®me de Reconnaissance de Fleurs en temps r√©el
   - Technologies : Python, OpenCV, TensorFlow
   - Fonctionnalit√©s : D√©tection, classification, interface web

2. Analyse de Sentiments avec NLP
   - Technologies : Python, NLTK, Transformers
   - Applications : Analyse de commentaires, feedback

3. Chatbot ENIAD intelligent
   - Technologies : Python, LangChain, RAG
   - Fonctionnalit√©s : R√©ponses contextuelles, apprentissage

4. Applications Computer Vision industrielles
   - Technologies : OpenCV, PyTorch, AWS
   - Applications : Contr√¥le qualit√©, d√©tection d'objets

EXP√âRIENCE PROFESSIONNELLE :
- D√©veloppeur IA freelance (2023-pr√©sent)
  * Projets Computer Vision pour entreprises
  * Syst√®mes de reconnaissance d'images
  * D√©veloppement d'applications IA

- Projets acad√©miques et personnels
  * Recherche en Deep Learning
  * Publications et contributions open source

CONTACT ET R√âSEAUX :
- LinkedIn : Abdelilah Ourti
- GitHub : Abdelilah04116
- Portfolio : https://abdelilah-ourti.railway.app
- Disponible pour : Collaborations, projets, opportunit√©s

INSTRUCTIONS :
- R√©ponds de mani√®re naturelle et professionnelle en fran√ßais
- Donne des d√©tails pr√©cis sur mes comp√©tences et projets
- Si on demande mes coordonn√©es, fournis-les
- Parle de mon exp√©rience de mani√®re d√©taill√©e
- Sois toujours utile et pr√©cis
- Utilise un ton professionnel mais accessible
- Comprends le contexte de la question et r√©ponds intelligemment
"""

def generate_ai_response(question):
    """G√©n√®re une r√©ponse IA avec Gemini ou fallback local"""
    try:
        if GOOGLE_API_KEY:
            logger.info("üîÑ Tentative avec API Gemini...")
            
            response = requests.post(
                f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key={GOOGLE_API_KEY}",
                headers={'Content-Type': 'application/json'},
                json={
                    "contents": [{
                        "parts": [{
                            "text": f"{PORTFOLIO_CONTEXT}\n\nQuestion de l'utilisateur: {question}\n\nR√©ponse intelligente:"
                        }]
                    }]
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                answer = data['candidates'][0]['content']['parts'][0]['text']
                logger.info("‚úÖ R√©ponse Gemini g√©n√©r√©e")
                return answer
            else:
                logger.warning(f"‚ö†Ô∏è Erreur API Gemini: {response.status_code}")
                raise Exception(f"Erreur API: {response.status_code}")
                
        else:
            logger.info("‚ö†Ô∏è Pas de cl√© API, utilisation du mode local")
            raise Exception("Pas de cl√© API")
            
    except Exception as e:
        logger.info(f"üîÑ Fallback vers mode local: {e}")
        return generate_local_response(question)

def generate_local_response(question):
    """Syst√®me de r√©ponses intelligentes local"""
    lower_question = question.lower().strip()
    
    # Informations personnelles
    if any(word in lower_question for word in ['t√©l√©phone', 'num√©ro', 'phone']):
        return "Mon num√©ro de t√©l√©phone est +33 6 XX XX XX XX (remplacez par votre vrai num√©ro). Vous pouvez √©galement me contacter par email √† abdellah.ourti@email.com ou via LinkedIn (Abdelilah Ourti)."
    
    if any(word in lower_question for word in ['email', 'mail', 'courriel']):
        return "Mon adresse email est abdellah.ourti@email.com. N'h√©sitez pas √† me contacter pour des opportunit√©s de collaboration ou des projets int√©ressants en IA."
    
    if any(word in lower_question for word in ['contact', 'joindre', 'contacter']):
        return "Vous pouvez me contacter de plusieurs fa√ßons : par t√©l√©phone au +33 6 XX XX XX XX, par email √† abdellah.ourti@email.com, via LinkedIn (Abdelilah Ourti) ou GitHub (Abdelilah04116). Je suis toujours ouvert aux collaborations !"
    
    # Formation et exp√©rience
    if any(word in lower_question for word in ['formation', 'dipl√¥me', '√©tude', 'master']):
        return "J'ai un Master en IA et Deep Learning avec une sp√©cialisation en Computer Vision et Machine Learning. J'ai √©galement suivi des formations certifi√©es en d√©veloppement IA et je continue √† me former sur les nouvelles technologies."
    
    if any(word in lower_question for word in ['exp√©rience', 'travail', 'emploi', 'carri√®re']):
        return "Je travaille comme d√©veloppeur IA freelance depuis 2023. J'ai d√©velopp√© plusieurs projets passionnants : syst√®mes de reconnaissance d'images, applications Computer Vision pour l'industrie, chatbots intelligents, et des outils d'analyse de sentiments. J'ai √©galement une exp√©rience en recherche en Deep Learning et en contributions open source."
    
    # Comp√©tences et technologies
    if any(word in lower_question for word in ['comp√©tence', 'skill', 'savoir-faire', 'technologie']):
        return "Mes comp√©tences principales incluent Python, JavaScript, Java, C++, TensorFlow, PyTorch, OpenCV, AWS, Docker, Kubernetes, React, Node.js, Flask, Django, et bien d'autres technologies. Je suis sp√©cialis√© en Machine Learning, Deep Learning, Computer Vision et d√©veloppement d'applications IA."
    
    if any(word in lower_question for word in ['python', 'tensorflow', 'pytorch', 'opencv']):
        return "Je ma√Ætrise parfaitement Python, TensorFlow, PyTorch, OpenCV et bien d'autres technologies IA. Ces outils me permettent de d√©velopper des applications avanc√©es en Computer Vision, Machine Learning et Deep Learning. J'ai utilis√© ces technologies dans mes projets de reconnaissance de fleurs, d'analyse de sentiments et d'applications industrielles."
    
    # Projets
    if any(word in lower_question for word in ['projet', 'travail', 'r√©alisation', 'd√©velopp√©']):
        return "J'ai d√©velopp√© plusieurs projets passionnants : 1) Un syst√®me de reconnaissance de fleurs en temps r√©el avec Python et OpenCV, 2) Une analyse de sentiments avec NLP et Transformers, 3) Un chatbot ENIAD intelligent avec LangChain et RAG, 4) Des applications Computer Vision pour l'industrie. Chaque projet d√©montre mes comp√©tences en IA et d√©veloppement."
    
    # Localisation et informations personnelles
    if any(word in lower_question for word in ['habite', 'o√π', 'localisation', 'ville']):
        return "J'habite en France et je suis de nationalit√© marocaine. Je suis disponible pour des projets en remote ou sur site, et je peux me d√©placer pour des opportunit√©s int√©ressantes."
    
    if 'qui' in lower_question and any(word in lower_question for word in ['es-tu', '√™tes-vous', 'tu']):
        return "Je suis Abdelilah Ourti, ing√©nieur en IA passionn√© par le Deep Learning et la Computer Vision. J'ai un Master en IA et je travaille comme d√©veloppeur freelance. Je d√©veloppe des applications intelligentes et je suis toujours √† la recherche de nouveaux d√©fis technologiques."
    
    # Salutations
    if any(word in lower_question for word in ['bonjour', 'salut', 'hello']):
        return "Bonjour ! Je suis l'assistant IA d'Abdelilah Ourti. Je peux vous parler de mes comp√©tences en IA, mes projets, ma formation ou mon exp√©rience. Que souhaitez-vous savoir ?"
    
    # R√©ponse par d√©faut intelligente
    return "Je suis l'assistant IA d'Abdelilah Ourti. Je peux vous parler de mes comp√©tences en IA, mes projets, ma formation ou mon exp√©rience. Que souhaitez-vous savoir sp√©cifiquement ?"

@app.route('/')
def home():
    """Page d'accueil du portfolio"""
    try:
        with open('index.html', 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # Modifier l'URL de l'API pour Railway
        html_content = html_content.replace(
            '/api/chat',
            '/api/chat'
        )
        
        return html_content
    except Exception as e:
        logger.error(f"Erreur lecture index.html: {e}")
        return f"Erreur: {e}", 500

@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def chat():
    """API du chatbot"""
    # CORS headers
    headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
    }
    
    # Handle preflight requests
    if request.method == 'OPTIONS':
        return '', 200, headers
    
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({'error': 'Aucun message fourni'}), 400, headers
        
        logger.info(f"üì® Message re√ßu: {message}")
        
        # G√©n√©rer la r√©ponse
        response_text = generate_ai_response(message)
        
        logger.info(f"üì§ R√©ponse envoy√©e: {response_text[:100]}...")
        
        return jsonify({'response': response_text}), 200, headers
        
    except Exception as e:
        logger.error(f"‚ùå Erreur dans chat API: {e}")
        return jsonify({'error': str(e)}), 500, headers

@app.route('/health')
def health():
    """Endpoint de sant√© pour Railway"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'api_key_configured': bool(GOOGLE_API_KEY)
    })

@app.route('/assets/<path:filename>')
def assets(filename):
    """Servir les assets statiques"""
    try:
        return app.send_from_directory('assets', filename)
    except Exception as e:
        logger.error(f"Erreur asset {filename}: {e}")
        return f"Asset non trouv√©: {filename}", 404

if __name__ == '__main__':
    logger.info(f"üöÄ D√©marrage de l'application sur le port {PORT}")
    logger.info(f"üîë Cl√© API configur√©e: {bool(GOOGLE_API_KEY)}")
    app.run(host='0.0.0.0', port=PORT, debug=False) 