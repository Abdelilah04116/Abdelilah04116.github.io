#!/usr/bin/env python3
"""
Script de test pour la configuration Vercel z√©ro d√©pendance
"""

import os
from pathlib import Path

def test_vercel_zero_deps_config():
    """Test de la configuration Vercel z√©ro d√©pendance"""
    
    print("üß™ Test de la configuration Vercel Z√©ro D√©pendance...")
    
    # V√©rifier les fichiers requis
    required_files = [
        "vercel.json",
        "api/chat.py",
        "api/__init__.py",
        "index.html",
        ".vercelignore"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå Fichiers manquants: {missing_files}")
        return False
    
    print("‚úÖ Tous les fichiers requis sont pr√©sents")
    
    # V√©rifier que requirements-vercel.txt n'existe pas
    if Path("requirements-vercel.txt").exists():
        print("‚ùå requirements-vercel.txt existe encore - doit √™tre supprim√©")
        return False
    
    print("‚úÖ Aucun fichier requirements (z√©ro d√©pendance)")
    
    # V√©rifier vercel.json
    try:
        import json
        with open("vercel.json", "r") as f:
            config = json.load(f)
        
        required_keys = ["version", "functions", "routes"]
        for key in required_keys:
            if key not in config:
                print(f"‚ùå Cl√© manquante dans vercel.json: {key}")
                return False
        
        # V√©rifier la configuration functions
        if "functions" not in config or "api/chat.py" not in config["functions"]:
            print("‚ùå Configuration functions manquante dans vercel.json")
            return False
        
        print("‚úÖ Configuration vercel.json valide (z√©ro d√©pendance)")
        
    except Exception as e:
        print(f"‚ùå Erreur dans vercel.json: {e}")
        return False
    
    # V√©rifier l'API endpoint
    try:
        with open("api/chat.py", "r") as f:
            api_code = f.read()
        
        required_elements = [
            "from http.server import BaseHTTPRequestHandler",
            "import json",
            "PORTFOLIO_DATA",
            "generate_response",
            "class ChatbotHandler"
        ]
        
        for element in required_elements:
            if element not in api_code:
                print(f"‚ùå √âl√©ment manquant dans api/chat.py: {element}")
                return False
        
        # V√©rifier qu'il n'y a pas d'imports Flask
        flask_imports = ["from flask import", "import flask", "Flask("]
        for flask_import in flask_imports:
            if flask_import in api_code:
                print(f"‚ùå Import Flask d√©tect√©: {flask_import}")
                return False
        
        print("‚úÖ API endpoint z√©ro d√©pendance configur√© correctement")
        
    except Exception as e:
        print(f"‚ùå Erreur dans api/chat.py: {e}")
        return False
    
    # V√©rifier .vercelignore
    try:
        with open(".vercelignore", "r") as f:
            ignore_content = f.read()
        
        if "chatbot/" not in ignore_content or "assets/" not in ignore_content:
            print("‚ùå .vercelignore ne semble pas exclure les fichiers volumineux")
            return False
        
        print("‚úÖ .vercelignore configur√© pour exclusion stricte")
        
    except Exception as e:
        print(f"‚ùå Erreur dans .vercelignore: {e}")
        return False
    
    # Estimer la taille
    print("\nüìä Estimation de la taille:")
    print("   - API Python standard: ~500 KB")
    print("   - Donn√©es int√©gr√©es: ~1 KB")
    print("   - Configuration: ~1 KB")
    print("   - Total estim√©: < 1 MB")
    print("   ‚úÖ Bien en dessous de la limite de 250 MB")
    
    print("\nüéâ Configuration Vercel Z√©ro D√©pendance pr√™te!")
    print("\nüìã Prochaines √©tapes:")
    print("1. Poussez votre code vers GitHub")
    print("2. Vercel d√©ploiera automatiquement")
    print("3. Plus d'erreur de limite de taille!")
    
    return True

if __name__ == "__main__":
    success = test_vercel_zero_deps_config()
    
    if success:
        print("\nüöÄ Pr√™t pour le d√©ploiement Vercel Z√©ro D√©pendance!")
        print("üí° Cette version garantit un d√©ploiement sans erreur de taille!")
        print("üèÜ Aucune d√©pendance externe - Solution d√©finitive!")
    else:
        print("\n‚ùå Veuillez corriger les erreurs avant le d√©ploiement")
        exit(1) 