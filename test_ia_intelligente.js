#!/usr/bin/env node
/**
 * Test de la vraie IA intelligente
 */

async function testIAIntelligente() {
  console.log('üß™ Test de la Vraie IA Intelligente');
  console.log('=' * 50);
  
  const testQuestions = [
    'Quel est ton num√©ro de t√©l√©phone ?',
    'Comment je peux te joindre ?',
    'Parle-moi de ton exp√©rience',
    'Qu\'est-ce que tu sais faire ?',
    'Montre-moi tes projets',
    'Tu as quel dipl√¥me ?',
    'Tu travailles o√π ?',
    'Tu habites o√π ?',
    'Tu fais quoi comme m√©tier ?',
    'Tu connais quelles technologies ?',
    'Peux-tu me donner ton email ?',
    'Quelle est ta formation ?',
    'Raconte-moi ton parcours',
    'Tu es disponible pour des projets ?',
    'Comment te contacter ?',
    'Tu ma√Ætrises Python ?',
    'Parle-moi de tes comp√©tences',
    'Quels sont tes projets r√©cents ?',
    'Tu as de l\'exp√©rience en freelance ?',
    'Peux-tu me parler de ton CV ?'
  ];
  
  console.log('üìã Questions de test intelligentes :');
  testQuestions.forEach((q, i) => {
    console.log(`${i + 1}. ${q}`);
  });
  
  console.log('\n' + '=' * 50);
  console.log('üöÄ Test en cours...');
  console.log('=' * 50);
  
  let successCount = 0;
  let totalCount = 0;
  
  for (const question of testQuestions) {
    totalCount++;
    
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify({ message: question })
    };
    
    try {
      const { handler } = require('./netlify/functions/api.js');
      const result = await handler(event, {});
      
      if (result.statusCode === 200) {
        const response = JSON.parse(result.body);
        const responseText = response.response;
        
        // V√©rifier si la r√©ponse est intelligente (pas la r√©ponse par d√©faut)
        const isIntelligentResponse = !responseText.includes('Que souhaitez-vous savoir ?') && 
                                    responseText.length > 50;
        
        if (isIntelligentResponse) {
          console.log(`‚úÖ "${question}"`);
          console.log(`   R√©ponse: ${responseText.substring(0, 100)}...`);
          successCount++;
        } else {
          console.log(`‚ùå "${question}" ‚Üí R√©ponse g√©n√©rique`);
          console.log(`   R√©ponse: ${responseText.substring(0, 100)}...`);
        }
      } else {
        console.log(`‚ùå "${question}" ‚Üí Erreur ${result.statusCode}`);
      }
    } catch (error) {
      console.log(`‚ùå "${question}" ‚Üí Erreur: ${error.message}`);
    }
    
    console.log(''); // Ligne vide pour s√©parer
  }
  
  console.log('=' * 50);
  console.log(`üìä R√©sultats: ${successCount}/${totalCount} r√©ponses intelligentes`);
  console.log(`üìà Taux de r√©ussite: ${Math.round((successCount/totalCount)*100)}%`);
  
  if (successCount > totalCount * 0.8) {
    console.log('üéâ IA Intelligente fonctionnelle !');
  } else if (successCount > totalCount * 0.5) {
    console.log('‚ö†Ô∏è IA partiellement fonctionnelle');
  } else {
    console.log('‚ùå Probl√®me avec l\'IA d√©tect√©');
  }
}

async function testQuestionsSpecifiques() {
  console.log('\nüß™ Test de Questions Sp√©cifiques');
  console.log('=' * 50);
  
  const specificTests = [
    { 
      question: 'Quel est ton num√©ro de t√©l√©phone ?', 
      expected: 't√©l√©phone' 
    },
    { 
      question: 'Comment je peux te joindre ?', 
      expected: 'contact' 
    },
    { 
      question: 'Parle-moi de ton exp√©rience', 
      expected: 'exp√©rience' 
    },
    { 
      question: 'Tu as quel dipl√¥me ?', 
      expected: 'formation' 
    },
    { 
      question: 'Tu habites o√π ?', 
      expected: 'localisation' 
    }
  ];
  
  for (const test of specificTests) {
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify({ message: test.question })
    };
    
    try {
      const { handler } = require('./netlify/functions/api.js');
      const result = await handler(event, {});
      
      if (result.statusCode === 200) {
        const response = JSON.parse(result.body);
        const responseText = response.response;
        
        // V√©rifier si la r√©ponse contient les informations attendues
        let detected = 'non d√©tect√©';
        
        if (responseText.includes('+33') || responseText.includes('t√©l√©phone')) detected = 't√©l√©phone';
        else if (responseText.includes('LinkedIn') || responseText.includes('GitHub')) detected = 'contact';
        else if (responseText.includes('freelance') || responseText.includes('exp√©rience')) detected = 'exp√©rience';
        else if (responseText.includes('Master') || responseText.includes('dipl√¥me')) detected = 'formation';
        else if (responseText.includes('France') || responseText.includes('localisation')) detected = 'localisation';
        
        const success = detected === test.expected;
        console.log(`${success ? '‚úÖ' : '‚ùå'} "${test.question}" ‚Üí ${detected} (attendu: ${test.expected})`);
        
        if (!success) {
          console.log(`   R√©ponse: ${responseText.substring(0, 80)}...`);
        }
      }
    } catch (error) {
      console.log(`‚ùå "${test.question}" ‚Üí Erreur: ${error.message}`);
    }
  }
}

async function main() {
  await testIAIntelligente();
  await testQuestionsSpecifiques();
  
  console.log('\n' + '=' * 50);
  console.log('üìã Recommandations:');
  console.log('1. Si l\'IA fonctionne, red√©ployez');
  console.log('2. Personnalisez vos informations dans le code');
  console.log('3. Configurez votre cl√© API Gemini');
  console.log('4. Testez en production');
  
  console.log('\nüîß Pour personnaliser :');
  console.log('- Remplacez le num√©ro de t√©l√©phone');
  console.log('- Remplacez l\'email');
  console.log('- Ajoutez vos vraies informations');
  console.log('- Modifiez le contexte selon vos besoins');
}

if (require.main === module) {
  main().catch(console.error);
} 